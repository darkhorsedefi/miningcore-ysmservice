package xehash

import (
	"fmt"
	"math/rand"
	"testing"
)

func TestHash(t *testing.T) {

	fmt.Println("variant_version:", Variant_version())

	empty_input := []uint8{}
	if Hash(empty_input) != [32]uint8{0x83, 0xf5, 0x98, 0x38, 0x5, 0xac, 0xcf, 0xf4, 0x4f, 0x13, 0x4c, 0xb2, 0xe0, 0x23, 0x4, 0x97, 0xb1, 0x3d, 0x6d, 0x42, 0x9e, 0x5f, 0x2, 0x64, 0x7f, 0x51, 0x24, 0x31, 0xeb, 0xd2, 0x86, 0xb3} {
		t.Fatal("Hash(empty_input) failed")
	}

	input := []uint8{12, 89, 67, 90, 3, 156}
	if Hash(input) != [32]uint8{0x91, 0x88, 0xba, 0xa4, 0xe5, 0x7b, 0x51, 0x5a, 0x63, 0x36, 0x4e, 0x93, 0x90, 0x9f, 0xe1, 0x6f, 0xe6, 0x39, 0x99, 0x93, 0x15, 0x5c, 0xc2, 0xe0, 0x9c, 0x87, 0xc, 0x3, 0x94, 0x2f, 0x72, 0x81} {
		t.Fatal("One hash failed")
	}
}

func BenchmarkHash(b *testing.B) {
	for i := 0; i < b.N; i++ {
		in_len := rand.Intn(50)
		input := make([]uint8, in_len, in_len)
		for i := 0; i < in_len; i++ {
			input[i] = uint8(rand.Intn(256))
		}

		Hash(input)
	}
}
